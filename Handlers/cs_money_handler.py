import json
import time
import traceback

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink, hunderline
from Data.parse_cs_money import collect_data
from create_bot import dp, bot, BotDB


# –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å "cs.money" –∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
# @dp.message_handler(Text(equals='Cs money üêí'))
async def cs_money(message: types.Message):
    cs_money_buttons = ['–ù–æ–∂–∏üî™', '–°–íüåπ', '–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´', '–ü–üüêß', '–®–íüêâ', '–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã‚ù§Ô∏è', '–í –º–µ–Ω—é üîô']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*cs_money_buttons)
    
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:', reply_markup=keyboard)
    
 
# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ù–æ–∂–∏
# @dp.message_handler(Text(equals='–ù–æ–∂–∏üî™'))
async def get_discount_knife(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–ù–æ–∂–∏ üî™")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '&type=2', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–∂–µ–π
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())


# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏
# @dp.message_handler(Text(equals='–°–íüåπ'))
async def get_discount_sv(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üåπ")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '&type=4', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
        

# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ü–∏—Å—Ç–æ–ª–µ—Ç—ã
# @dp.message_handler(Text(equals='–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´'))
async def get_discount_pistol(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '&type=5', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
        

# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã
# @dp.message_handler(Text(equals='–ü–üüêß'))
async def get_discount_PP(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã üêß")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '&type=6', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤-–ø—É–ª–µ–º—ë—Ç–æ–≤
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())


# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏
# @dp.message_handler(Text(equals='–®–íüêâ'))
async def get_discount_shv(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üêâ")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '&type=3', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ —à—Ç—É—Ä–º–æ–≤—ã—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
    

# –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @dp.message_handler(Text(equals='–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã‚ù§Ô∏è'))
async def get_discount_all(message: types.Message):
    users_id = message.from_user.id
    
    try:
        max_price, min_price, discount_percent = BotDB.get_user_settings(users_id)
        
        replace_symbol = ['(', ')', ',']
        
        max_price = str(max_price)
        min_price = str(min_price)
        discount_percent = str(discount_percent)
        
        for i in replace_symbol:
            for j in i:
                max_price = max_price.replace(j, '').strip()
                min_price = min_price.replace(j, '').strip()
                discount_percent = discount_percent.replace(j, '').strip()
                
        max_price = int(max_price)
        min_price = int(min_price)
        discount_percent = int(discount_percent)
        
            
        settings_message = f'‚öôÔ∏è {hbold("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞: ")}\n\n' \
            f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {hbold("–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã‚ù§Ô∏è")} \n' \
            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(min_price)}$\n' \
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {hbold(max_price)}$\n' \
            f'–°–∫–∏–¥–∫–∞:  –æ—Ç  {hbold(discount_percent)}% üíé'
                
        await message.answer(settings_message)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')
        
        collect_data(
                    cat_type = '', 
                    max_price = max_price, 
                    min_price = min_price, 
                    discount_procent = int(discount_percent),
                    users_id = users_id
                    ) # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            
        with open(f'Data/Result_and_setup/result{users_id}.json', encoding='utf-8') as file:
            data = json.load(file)
            
        if len(data) > 0:
            for index, item in enumerate(data):
                card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
                    f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("item_price")}$ üî•'
                        
                        
                if index%20 == 0:
                    time.sleep(5)
                        
                await message.answer(card)
            await message.answer(f'–í—Å–µ–≥–æ –Ω–∞—à–ª–æ—Å—å: {hbold(len(data))} –ø—Ä–µ–¥–º–µ—Ç–∞(–æ–≤) ‚úÖ')
                
        elif len(data) == 0:
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
            
    except TypeError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚ùå')
        
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ‚öôÔ∏è')
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω —á—É—Ç—å –º–µ–Ω—å—à–µ, –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üßê')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
        
        
def register_handlers_cs_money_handler(dp: Dispatcher):
    dp.register_message_handler(cs_money, Text(equals='Cs money üêí'))
    dp.register_message_handler(get_discount_knife, Text(equals='–ù–æ–∂–∏üî™'))
    dp.register_message_handler(get_discount_sv, Text(equals='–°–íüåπ'))
    dp.register_message_handler(get_discount_pistol, Text(equals='–ü–∏—Å—Ç–æ–ª–µ—Ç—ãüî´'))
    dp.register_message_handler(get_discount_PP, Text(equals='–ü–üüêß'))
    dp.register_message_handler(get_discount_shv, Text(equals='–®–íüêâ'))
    dp.register_message_handler(get_discount_all, Text(equals='–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã‚ù§Ô∏è'))
